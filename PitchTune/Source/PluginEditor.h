/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#ifndef PLUGINEDITOR_H_INCLUDED
#define PLUGINEDITOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "PluginProcessor.h"
#include "AudioRoll.h"
#include <vector>


class PitchProcessor;

//==============================================================================
/**
*/
class PitchTuneAudioProcessorEditor  : public AudioProcessorEditor,
                                        public ButtonListener,
                                        public AsyncUpdater
{
public:
    PitchTuneAudioProcessorEditor (PitchTuneAudioProcessor* ownerFilter);
    ~PitchTuneAudioProcessorEditor();
    
    void buttonClicked(Button *theButton);

    //getter
    PitchTuneAudioProcessor* getProcessor() const
    {
        return static_cast <PitchTuneAudioProcessor*> (getAudioProcessor());
    }
    //==============================================================================
    // This is just a standard Juce paint method...
    void paint (Graphics& g);
    void resized();
    
    void handleAsyncUpdate();
    
    void setThumbs(float *x, long numSamples, PitchProcessor *pp);
    void updateAudio(int index);
    
    AudioRoll *thumb;
    bool updateThumb;
    int numThumbs;
    double ppq;
    int type;
private:
    Button *transferBtn;
    std::vector<int> pitches;
};


#endif  // PLUGINEDITOR_H_INCLUDED
